{"ast":null,"code":"// import React from \"react\";\n// import {\n//   Dialog,\n//   Button,\n//   Grid,\n//   InputLabel,\n//   FormControl,\n//   MenuItem,\n//   Select,\n//   DialogActions,\n//   DialogTitle,\n//   DialogContent,\n//   IconButton,\n//   Icon,\n// } from \"@material-ui/core\";\n// import { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n// import { insertEmployees, updateEmployees } from \"./EmployeesService\";\n// import Draggable from \"react-draggable\";\n// import Paper from \"@material-ui/core/Paper\";\n// import \"../../../styles/views/_loadding.scss\";\n// import clsx from \"clsx\";\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\n// import { toast } from \"react-toastify\";\n// import \"react-toastify/dist/ReactToastify.css\";\n// import \"../../../styles/views/_style.scss\";\n// import { useState } from \"react\";\n// import { useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import {\n//   getListCommune,\n//   getListDistrict,\n//   getListProvince,\n// } from \"app/redux/actions/EmployeesActions\";\n// toast.configure({\n//   autoClose: 1000,\n//   draggable: false,\n//   limit: 3,\n// });\n// function PaperComponent(props) {\n//   return (\n//     <Draggable\n//       handle=\"#draggable-dialog-title\"\n//       cancel={'[class*=\"MuiDialogContent-root\"]'}\n//     >\n//       <Paper {...props} />\n//     </Draggable>\n//   );\n// }\n// function EmployeesEditorDialog(props) {\n//   const { open, handleClose, t, item } = props;\n//   const id = item.id;\n//   const listProvince = useSelector((state) => state.Employees.listProvince);\n//   const listDistrict = useSelector((state) => state.Employees.listDistrict);\n//   const listCommune = useSelector((state) => state.Employees.listCommune);\n//   const [loading, setLoading] = useState(false);\n//   const [name, setName] = useState(item?.name);\n//   const [age, setAge] = useState(item?.age);\n//   const [email, setEmail] = useState(item?.email);\n//   const [code, setCode] = useState(item?.code);\n//   const [phone, setPhone] = useState(item?.phone);\n//   const [address, setAddress] = useState({\n//     province: {},\n//     district: {},\n//     commune: {},\n//     districtsByProvince: [],\n//     communesByDistrict: [],\n//   });\n//   const disPatch = useDispatch();\n//   const handleValidateForm = () => {\n//     if (JSON.stringify(address.province) === JSON.stringify({})) {\n//       return false;\n//     }\n//     if (JSON.stringify(address.district) === JSON.stringify({})) {\n//       return false;\n//     }\n//     if (JSON.stringify(address.commune) === JSON.stringify({})) {\n//       return false;\n//     }\n//     return true;\n//   };\n//   const handleSave = async () => {\n//     setLoading(true);\n//     const Employees = {\n//       name,\n//       age,\n//       email,\n//       code,\n//       phone,\n//       province: address.province,\n//       district: address.district,\n//       commune: address.commune,\n//     };\n//     const checkAddress = handleValidateForm();\n//     if (checkAddress) {\n//       if (id) {\n//         const data = await updateEmployees(id, Employees);\n//         if (data.data.message === \"Thành công!\") {\n//           setLoading(false);\n//           toast.success(\"Cập nhật viên thành công\");\n//           handleClose();\n//         } else {\n//           setLoading(false);\n//           toast.warning(data.data.message);\n//         }\n//       } else {\n//         const data = await insertEmployees(Employees);\n//         if (data.data.message === \"Thành công!\") {\n//           setLoading(false);\n//           toast.success(\"Thêm nhân viên thành công\");\n//           handleClose();\n//         } else {\n//           setLoading(false);\n//           toast.warning(data.data.message);\n//         }\n//       }\n//     } else {\n//       setLoading(false);\n//       toast.error(\"Nhập đủ địa chỉ\");\n//     }\n//   };\n//   const handleOpenDistrict = () => {\n//     const checkEmptyProvince =\n//       Object.keys(address.province).length === 0 &&\n//       address.province.constructor === Object;\n//     if (checkEmptyProvince) {\n//       return;\n//     } else {\n//       setAddress({\n//         ...address,\n//         districtsByProvince: listDistrict,\n//       });\n//     }\n//   };\n//   const handleOpenCommune = () => {\n//     const checkEmptyDistrict =\n//       Object.keys(address.district).length === 0 &&\n//       address.district.constructor === Object;\n//     if (checkEmptyDistrict) {\n//       return;\n//     }\n//   };\n//   const handleChange = (e) => {\n//     if (e.target.name === \"province\") {\n//       setAddress({\n//         ...address,\n//         province: e.target.value,\n//         district: {},\n//         commune: {},\n//         districtsByProvince: [],\n//         communesByDistrict: [],\n//       });\n//     }\n//     if (e.target.name === \"district\") {\n//       const list = listCommune.filter(\n//         (commune) => commune.district.name == e.target.value.name\n//       );\n//       setAddress({\n//         ...address,\n//         district: e.target.value,\n//         commune: {},\n//         communesByDistrict: list,\n//       });\n//     }\n//     if (e.target.name === \"commune\") {\n//       setAddress({\n//         ...address,\n//         commune: e.target.value,\n//       });\n//     }\n//   };\n//   useEffect(() => {\n//     disPatch(getListProvince());\n//     disPatch(getListDistrict());\n//     disPatch(getListCommune());\n//     ValidatorForm.addValidationRule(\"isName\", (value) => {\n//       if (value.length < 6) {\n//         return false;\n//       }\n//       return true;\n//     });\n//     ValidatorForm.addValidationRule(\"isAge\", (value) => {\n//       if (value <= 18 || value >= 75) {\n//         return false;\n//       }\n//       return true;\n//     });\n//     ValidatorForm.addValidationRule(\"isCode\", (value) => {\n//       let regex = /^\\w{6,}$/;\n//       if (!regex.test(value)) {\n//         return false;\n//       }\n//       return true;\n//     });\n//     ValidatorForm.addValidationRule(\"isPhone\", (value) => {\n//       let regex = /^0[1-9][0-9]{8}$/;\n//       if (!regex.test(value)) {\n//         return false;\n//       }\n//       return true;\n//     });\n//     return () => {\n//       ValidatorForm.removeValidationRule(\"isName\");\n//       ValidatorForm.removeValidationRule(\"isAge\");\n//       ValidatorForm.removeValidationRule(\"isCode\");\n//       ValidatorForm.removeValidationRule(\"isPhone\");\n//     };\n//   }, []);\n//   return (\n//     <Dialog\n//       open={open}\n//       PaperComponent={PaperComponent}\n//       maxWidth={\"md\"}\n//       fullWidth={true}\n//     >\n//       <div className={clsx(\"wrapperButton\", !loading && \"hidden\")}>\n//         <CircularProgress className=\"buttonProgress\" size={24} />\n//       </div>\n//       <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\n//         <span className=\"mb-20 styleColor\">\n//           {\" \"}\n//           {(id ? t(\"general.update\") : t(\"Add\")) +\n//             \" \" +\n//             t(\"user.title_Employees\")}{\" \"}\n//         </span>\n//         <IconButton\n//           style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }}\n//           onClick={() => handleClose()}\n//         >\n//           <Icon color=\"error\" title={t(\"close\")}>\n//             close\n//           </Icon>\n//         </IconButton>\n//       </DialogTitle>\n//       <ValidatorForm\n//         // ref=\"form\"\n//         onSubmit={handleSave}\n//         style={{\n//           overflowY: \"auto\",\n//           display: \"flex\",\n//           flexDirection: \"column\",\n//         }}\n//       >\n//         <DialogContent dividers>\n//           <Grid className=\"mb-16\" container spacing={1}>\n//             {/* name */}\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\n//               <TextValidator\n//                 className=\"w-100 mb-16\"\n//                 label={\n//                   <span className=\"font\">\n//                     <span style={{ color: \"red\" }}> * </span>\n//                     {t(\"user.displayName\")}\n//                   </span>\n//                 }\n//                 type=\"text\"\n//                 name=\"name\"\n//                 value={name ? name : \"\"}\n//                 onChange={(e) => setName(e.target.value)}\n//                 validators={[\"required\", \"isName\"]}\n//                 errorMessages={[\n//                   t(\"general.errorMessages_required\"),\n//                   \"Họ và tên ít nhất 6 ký tự\",\n//                 ]}\n//                 variant=\"outlined\"\n//                 size=\"small\"\n//               />\n//             </Grid>\n//             {/* age */}\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\n//               <TextValidator\n//                 className=\"w-100 mb-16\"\n//                 label={\n//                   <span className=\"font\">\n//                     <span style={{ color: \"red\" }}> * </span>\n//                     {t(\"user.age\")}\n//                   </span>\n//                 }\n//                 type=\"number\"\n//                 name=\"age\"\n//                 value={age ? age : \"\"}\n//                 onChange={(e) => setAge(e.target.value)}\n//                 validators={[\"required\", \"isAge\"]}\n//                 errorMessages={[\n//                   t(\"general.errorMessages_required\"),\n//                   \"Không trong độ tuổi lao động\",\n//                 ]}\n//                 variant=\"outlined\"\n//                 size=\"small\"\n//               />\n//             </Grid>\n//             {/* email */}\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\n//               <TextValidator\n//                 className=\"w-100 mb-16\"\n//                 label={\n//                   <span className=\"font\">\n//                     <span style={{ color: \"red\" }}> * </span>\n//                     {t(\"Email\")}\n//                   </span>\n//                 }\n//                 type=\"email\"\n//                 name=\"email\"\n//                 value={email ? email : \"\"}\n//                 onChange={(e) => setEmail(e.target.value)}\n//                 validators={[\"required\", \"isEmail\"]}\n//                 errorMessages={[\n//                   t(\"general.errorMessages_required\"),\n//                   t(\"general.errorMessages_email_valid\"),\n//                 ]}\n//                 variant=\"outlined\"\n//                 size=\"small\"\n//               />\n//             </Grid>\n//             {/* code */}\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\n//               <TextValidator\n//                 className=\"w-100 mb-16\"\n//                 label={\n//                   <span className=\"font\">\n//                     <span style={{ color: \"red\" }}> * </span>\n//                     {t(\"user.code\")}\n//                   </span>\n//                 }\n//                 type=\"text\"\n//                 name=\"code\"\n//                 value={code ? code : \"\"}\n//                 onChange={(e) => setCode(e.target.value)}\n//                 validators={[\"required\", \"isCode\"]}\n//                 errorMessages={[\n//                   t(\"general.errorMessages_required\"),\n//                   \"Code phải đủ 6-10 ký tự\",\n//                 ]}\n//                 variant=\"outlined\"\n//                 size=\"small\"\n//               />\n//             </Grid>\n//             {/* phone */}\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\n//               <TextValidator\n//                 className=\"w-100 mb-16\"\n//                 label={\n//                   <span className=\"font\">\n//                     <span style={{ color: \"red\" }}> * </span>\n//                     {t(\"user.phone\")}\n//                   </span>\n//                 }\n//                 type=\"tel\"\n//                 name=\"phone\"\n//                 value={phone ? phone : \"\"}\n//                 onChange={(e) => setPhone(e.target.value)}\n//                 validators={[\"required\", \"isPhone\"]}\n//                 errorMessages={[\n//                   t(\"general.errorMessages_required\"),\n//                   \"Nhập đúng định dạng sđt\",\n//                 ]}\n//                 variant=\"outlined\"\n//                 size=\"small\"\n//               />\n//             </Grid>\n//             {/* province */}\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\n//               <FormControl\n//                 className=\"mb-16\"\n//                 fullWidth={true}\n//                 variant=\"outlined\"\n//                 size=\"small\"\n//               >\n//                 <InputLabel htmlFor=\"province-simple\">\n//                   {<span className=\"font\">{t(\"user.province\")}</span>}\n//                 </InputLabel>\n//                 <Select\n//                   value={\n//                     JSON.stringify(address.province) === JSON.stringify({})\n//                       ? null\n//                       : address.province\n//                   }\n//                   onChange={(e) => handleChange(e)}\n//                   inputProps={{\n//                     name: \"province\",\n//                     id: \"province-simple\",\n//                   }}\n//                 >\n//                   {listProvince.map((province) => {\n//                     return (\n//                       <MenuItem key={province.id} value={province}>\n//                         {province.name}\n//                       </MenuItem>\n//                     );\n//                   })}\n//                 </Select>\n//               </FormControl>\n//             </Grid>\n//             {/* district */}\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\n//               <FormControl\n//                 className=\"mb-16\"\n//                 fullWidth={true}\n//                 variant=\"outlined\"\n//                 size=\"small\"\n//               >\n//                 <InputLabel htmlFor=\"district-simple\">\n//                   {<span className=\"font\">{t(\"user.district\")}</span>}\n//                 </InputLabel>\n//                 <Select\n//                   value={\n//                     JSON.stringify(address.district) === JSON.stringify({})\n//                       ? null\n//                       : address.district\n//                   }\n//                   onChange={(e) => handleChange(e)}\n//                   onOpen={handleOpenDistrict}\n//                   inputProps={{\n//                     name: \"district\",\n//                     id: \"district-simple\",\n//                   }}\n//                 >\n//                   {address.districtsByProvince.map((district) => {\n//                     return (\n//                       <MenuItem key={district.id} value={district}>\n//                         {district.name}\n//                       </MenuItem>\n//                     );\n//                   })}\n//                 </Select>\n//               </FormControl>\n//             </Grid>\n//             {/* commune */}\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\n//               <FormControl fullWidth={true} variant=\"outlined\" size=\"small\">\n//                 <InputLabel htmlFor=\"commune-simple\">\n//                   {<span className=\"font\">{t(\"user.commune\")}</span>}\n//                 </InputLabel>\n//                 <Select\n//                   value={\n//                     JSON.stringify(address.commune) === JSON.stringify({})\n//                       ? null\n//                       : address.commune\n//                   }\n//                   onChange={(e) => handleChange(e)}\n//                   onOpen={handleOpenCommune}\n//                   inputProps={{\n//                     name: \"commune\",\n//                     id: \"commune-simple\",\n//                   }}\n//                 >\n//                   {address.communesByDistrict.map((commune) => {\n//                     return (\n//                       <MenuItem key={commune.id} value={commune}>\n//                         {commune.name}\n//                       </MenuItem>\n//                     );\n//                   })}\n//                 </Select>\n//               </FormControl>\n//             </Grid>\n//           </Grid>\n//         </DialogContent>\n//         <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\n//           <Button\n//             variant=\"contained\"\n//             color=\"secondary\"\n//             onClick={() => handleClose()}\n//           >\n//             {t(\"Cancel\")}\n//           </Button>\n//           <Button\n//             variant=\"contained\"\n//             color=\"primary\"\n//             type=\"submit\"\n//             disabled={loading}\n//           >\n//             {t(\"Save\")}\n//           </Button>\n//         </DialogActions>\n//       </ValidatorForm>\n//     </Dialog>\n//   );\n// }\n// export default EmployeesEditorDialog;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/L0-old/src/app/views/Employees/EmployeesEditorDialog.jsx"],"names":[],"mappingssourcesContent":["// import React from \"react\";\r\n// import {\r\n//   Dialog,\r\n//   Button,\r\n//   Grid,\r\n//   InputLabel,\r\n//   FormControl,\r\n//   MenuItem,\r\n//   Select,\r\n//   DialogActions,\r\n//   DialogTitle,\r\n//   DialogContent,\r\n//   IconButton,\r\n//   Icon,\r\n// } from \"@material-ui/core\";\r\n// import { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\n// import { insertEmployees, updateEmployees } from \"./EmployeesService\";\r\n// import Draggable from \"react-draggable\";\r\n// import Paper from \"@material-ui/core/Paper\";\r\n// import \"../../../styles/views/_loadding.scss\";\r\n// import clsx from \"clsx\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import { toast } from \"react-toastify\";\r\n// import \"react-toastify/dist/ReactToastify.css\";\r\n// import \"../../../styles/views/_style.scss\";\r\n// import { useState } from \"react\";\r\n// import { useEffect } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   getListCommune,\r\n//   getListDistrict,\r\n//   getListProvince,\r\n// } from \"app/redux/actions/EmployeesActions\";\r\n\r\n// toast.configure({\r\n//   autoClose: 1000,\r\n//   draggable: false,\r\n//   limit: 3,\r\n// });\r\n// function PaperComponent(props) {\r\n//   return (\r\n//     <Draggable\r\n//       handle=\"#draggable-dialog-title\"\r\n//       cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n//     >\r\n//       <Paper {...props} />\r\n//     </Draggable>\r\n//   );\r\n// }\r\n\r\n// function EmployeesEditorDialog(props) {\r\n//   const { open, handleClose, t, item } = props;\r\n//   const id = item.id;\r\n\r\n//   const listProvince = useSelector((state) => state.Employees.listProvince);\r\n//   const listDistrict = useSelector((state) => state.Employees.listDistrict);\r\n//   const listCommune = useSelector((state) => state.Employees.listCommune);\r\n\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [name, setName] = useState(item?.name);\r\n//   const [age, setAge] = useState(item?.age);\r\n//   const [email, setEmail] = useState(item?.email);\r\n//   const [code, setCode] = useState(item?.code);\r\n//   const [phone, setPhone] = useState(item?.phone);\r\n//   const [address, setAddress] = useState({\r\n//     province: {},\r\n//     district: {},\r\n//     commune: {},\r\n//     districtsByProvince: [],\r\n//     communesByDistrict: [],\r\n//   });\r\n\r\n//   const disPatch = useDispatch();\r\n\r\n//   const handleValidateForm = () => {\r\n//     if (JSON.stringify(address.province) === JSON.stringify({})) {\r\n//       return false;\r\n//     }\r\n//     if (JSON.stringify(address.district) === JSON.stringify({})) {\r\n//       return false;\r\n//     }\r\n//     if (JSON.stringify(address.commune) === JSON.stringify({})) {\r\n//       return false;\r\n//     }\r\n//     return true;\r\n//   };\r\n\r\n//   const handleSave = async () => {\r\n//     setLoading(true);\r\n\r\n//     const Employees = {\r\n//       name,\r\n//       age,\r\n//       email,\r\n//       code,\r\n//       phone,\r\n//       province: address.province,\r\n//       district: address.district,\r\n//       commune: address.commune,\r\n//     };\r\n//     const checkAddress = handleValidateForm();\r\n\r\n//     if (checkAddress) {\r\n//       if (id) {\r\n//         const data = await updateEmployees(id, Employees);\r\n\r\n//         if (data.data.message === \"Thành công!\") {\r\n//           setLoading(false);\r\n//           toast.success(\"Cập nhật viên thành công\");\r\n//           handleClose();\r\n//         } else {\r\n//           setLoading(false);\r\n//           toast.warning(data.data.message);\r\n//         }\r\n//       } else {\r\n//         const data = await insertEmployees(Employees);\r\n\r\n//         if (data.data.message === \"Thành công!\") {\r\n//           setLoading(false);\r\n//           toast.success(\"Thêm nhân viên thành công\");\r\n//           handleClose();\r\n//         } else {\r\n//           setLoading(false);\r\n//           toast.warning(data.data.message);\r\n//         }\r\n//       }\r\n//     } else {\r\n//       setLoading(false);\r\n//       toast.error(\"Nhập đủ địa chỉ\");\r\n//     }\r\n//   };\r\n\r\n//   const handleOpenDistrict = () => {\r\n//     const checkEmptyProvince =\r\n//       Object.keys(address.province).length === 0 &&\r\n//       address.province.constructor === Object;\r\n\r\n//     if (checkEmptyProvince) {\r\n//       return;\r\n//     } else {\r\n//       setAddress({\r\n//         ...address,\r\n//         districtsByProvince: listDistrict,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const handleOpenCommune = () => {\r\n//     const checkEmptyDistrict =\r\n//       Object.keys(address.district).length === 0 &&\r\n//       address.district.constructor === Object;\r\n//     if (checkEmptyDistrict) {\r\n//       return;\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     if (e.target.name === \"province\") {\r\n//       setAddress({\r\n//         ...address,\r\n//         province: e.target.value,\r\n//         district: {},\r\n//         commune: {},\r\n//         districtsByProvince: [],\r\n//         communesByDistrict: [],\r\n//       });\r\n//     }\r\n\r\n//     if (e.target.name === \"district\") {\r\n//       const list = listCommune.filter(\r\n//         (commune) => commune.district.name == e.target.value.name\r\n//       );\r\n//       setAddress({\r\n//         ...address,\r\n//         district: e.target.value,\r\n//         commune: {},\r\n//         communesByDistrict: list,\r\n//       });\r\n//     }\r\n\r\n//     if (e.target.name === \"commune\") {\r\n//       setAddress({\r\n//         ...address,\r\n//         commune: e.target.value,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     disPatch(getListProvince());\r\n//     disPatch(getListDistrict());\r\n//     disPatch(getListCommune());\r\n\r\n//     ValidatorForm.addValidationRule(\"isName\", (value) => {\r\n//       if (value.length < 6) {\r\n//         return false;\r\n//       }\r\n//       return true;\r\n//     });\r\n\r\n//     ValidatorForm.addValidationRule(\"isAge\", (value) => {\r\n//       if (value <= 18 || value >= 75) {\r\n//         return false;\r\n//       }\r\n//       return true;\r\n//     });\r\n\r\n//     ValidatorForm.addValidationRule(\"isCode\", (value) => {\r\n//       let regex = /^\\w{6,}$/;\r\n//       if (!regex.test(value)) {\r\n//         return false;\r\n//       }\r\n//       return true;\r\n//     });\r\n\r\n//     ValidatorForm.addValidationRule(\"isPhone\", (value) => {\r\n//       let regex = /^0[1-9][0-9]{8}$/;\r\n//       if (!regex.test(value)) {\r\n//         return false;\r\n//       }\r\n//       return true;\r\n//     });\r\n\r\n//     return () => {\r\n//       ValidatorForm.removeValidationRule(\"isName\");\r\n//       ValidatorForm.removeValidationRule(\"isAge\");\r\n//       ValidatorForm.removeValidationRule(\"isCode\");\r\n//       ValidatorForm.removeValidationRule(\"isPhone\");\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <Dialog\r\n//       open={open}\r\n//       PaperComponent={PaperComponent}\r\n//       maxWidth={\"md\"}\r\n//       fullWidth={true}\r\n//     >\r\n//       <div className={clsx(\"wrapperButton\", !loading && \"hidden\")}>\r\n//         <CircularProgress className=\"buttonProgress\" size={24} />\r\n//       </div>\r\n\r\n//       <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\r\n//         <span className=\"mb-20 styleColor\">\r\n//           {\" \"}\r\n//           {(id ? t(\"general.update\") : t(\"Add\")) +\r\n//             \" \" +\r\n//             t(\"user.title_Employees\")}{\" \"}\r\n//         </span>\r\n\r\n//         <IconButton\r\n//           style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }}\r\n//           onClick={() => handleClose()}\r\n//         >\r\n//           <Icon color=\"error\" title={t(\"close\")}>\r\n//             close\r\n//           </Icon>\r\n//         </IconButton>\r\n//       </DialogTitle>\r\n\r\n//       <ValidatorForm\r\n//         // ref=\"form\"\r\n//         onSubmit={handleSave}\r\n//         style={{\r\n//           overflowY: \"auto\",\r\n//           display: \"flex\",\r\n//           flexDirection: \"column\",\r\n//         }}\r\n//       >\r\n//         <DialogContent dividers>\r\n//           <Grid className=\"mb-16\" container spacing={1}>\r\n//             {/* name */}\r\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\r\n//               <TextValidator\r\n//                 className=\"w-100 mb-16\"\r\n//                 label={\r\n//                   <span className=\"font\">\r\n//                     <span style={{ color: \"red\" }}> * </span>\r\n//                     {t(\"user.displayName\")}\r\n//                   </span>\r\n//                 }\r\n//                 type=\"text\"\r\n//                 name=\"name\"\r\n//                 value={name ? name : \"\"}\r\n//                 onChange={(e) => setName(e.target.value)}\r\n//                 validators={[\"required\", \"isName\"]}\r\n//                 errorMessages={[\r\n//                   t(\"general.errorMessages_required\"),\r\n//                   \"Họ và tên ít nhất 6 ký tự\",\r\n//                 ]}\r\n//                 variant=\"outlined\"\r\n//                 size=\"small\"\r\n//               />\r\n//             </Grid>\r\n\r\n//             {/* age */}\r\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\r\n//               <TextValidator\r\n//                 className=\"w-100 mb-16\"\r\n//                 label={\r\n//                   <span className=\"font\">\r\n//                     <span style={{ color: \"red\" }}> * </span>\r\n//                     {t(\"user.age\")}\r\n//                   </span>\r\n//                 }\r\n//                 type=\"number\"\r\n//                 name=\"age\"\r\n//                 value={age ? age : \"\"}\r\n//                 onChange={(e) => setAge(e.target.value)}\r\n//                 validators={[\"required\", \"isAge\"]}\r\n//                 errorMessages={[\r\n//                   t(\"general.errorMessages_required\"),\r\n//                   \"Không trong độ tuổi lao động\",\r\n//                 ]}\r\n//                 variant=\"outlined\"\r\n//                 size=\"small\"\r\n//               />\r\n//             </Grid>\r\n\r\n//             {/* email */}\r\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\r\n//               <TextValidator\r\n//                 className=\"w-100 mb-16\"\r\n//                 label={\r\n//                   <span className=\"font\">\r\n//                     <span style={{ color: \"red\" }}> * </span>\r\n//                     {t(\"Email\")}\r\n//                   </span>\r\n//                 }\r\n//                 type=\"email\"\r\n//                 name=\"email\"\r\n//                 value={email ? email : \"\"}\r\n//                 onChange={(e) => setEmail(e.target.value)}\r\n//                 validators={[\"required\", \"isEmail\"]}\r\n//                 errorMessages={[\r\n//                   t(\"general.errorMessages_required\"),\r\n//                   t(\"general.errorMessages_email_valid\"),\r\n//                 ]}\r\n//                 variant=\"outlined\"\r\n//                 size=\"small\"\r\n//               />\r\n//             </Grid>\r\n\r\n//             {/* code */}\r\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\r\n//               <TextValidator\r\n//                 className=\"w-100 mb-16\"\r\n//                 label={\r\n//                   <span className=\"font\">\r\n//                     <span style={{ color: \"red\" }}> * </span>\r\n//                     {t(\"user.code\")}\r\n//                   </span>\r\n//                 }\r\n//                 type=\"text\"\r\n//                 name=\"code\"\r\n//                 value={code ? code : \"\"}\r\n//                 onChange={(e) => setCode(e.target.value)}\r\n//                 validators={[\"required\", \"isCode\"]}\r\n//                 errorMessages={[\r\n//                   t(\"general.errorMessages_required\"),\r\n//                   \"Code phải đủ 6-10 ký tự\",\r\n//                 ]}\r\n//                 variant=\"outlined\"\r\n//                 size=\"small\"\r\n//               />\r\n//             </Grid>\r\n\r\n//             {/* phone */}\r\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\r\n//               <TextValidator\r\n//                 className=\"w-100 mb-16\"\r\n//                 label={\r\n//                   <span className=\"font\">\r\n//                     <span style={{ color: \"red\" }}> * </span>\r\n//                     {t(\"user.phone\")}\r\n//                   </span>\r\n//                 }\r\n//                 type=\"tel\"\r\n//                 name=\"phone\"\r\n//                 value={phone ? phone : \"\"}\r\n//                 onChange={(e) => setPhone(e.target.value)}\r\n//                 validators={[\"required\", \"isPhone\"]}\r\n//                 errorMessages={[\r\n//                   t(\"general.errorMessages_required\"),\r\n//                   \"Nhập đúng định dạng sđt\",\r\n//                 ]}\r\n//                 variant=\"outlined\"\r\n//                 size=\"small\"\r\n//               />\r\n//             </Grid>\r\n\r\n//             {/* province */}\r\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\r\n//               <FormControl\r\n//                 className=\"mb-16\"\r\n//                 fullWidth={true}\r\n//                 variant=\"outlined\"\r\n//                 size=\"small\"\r\n//               >\r\n//                 <InputLabel htmlFor=\"province-simple\">\r\n//                   {<span className=\"font\">{t(\"user.province\")}</span>}\r\n//                 </InputLabel>\r\n//                 <Select\r\n//                   value={\r\n//                     JSON.stringify(address.province) === JSON.stringify({})\r\n//                       ? null\r\n//                       : address.province\r\n//                   }\r\n//                   onChange={(e) => handleChange(e)}\r\n//                   inputProps={{\r\n//                     name: \"province\",\r\n//                     id: \"province-simple\",\r\n//                   }}\r\n//                 >\r\n//                   {listProvince.map((province) => {\r\n//                     return (\r\n//                       <MenuItem key={province.id} value={province}>\r\n//                         {province.name}\r\n//                       </MenuItem>\r\n//                     );\r\n//                   })}\r\n//                 </Select>\r\n//               </FormControl>\r\n//             </Grid>\r\n\r\n//             {/* district */}\r\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\r\n//               <FormControl\r\n//                 className=\"mb-16\"\r\n//                 fullWidth={true}\r\n//                 variant=\"outlined\"\r\n//                 size=\"small\"\r\n//               >\r\n//                 <InputLabel htmlFor=\"district-simple\">\r\n//                   {<span className=\"font\">{t(\"user.district\")}</span>}\r\n//                 </InputLabel>\r\n//                 <Select\r\n//                   value={\r\n//                     JSON.stringify(address.district) === JSON.stringify({})\r\n//                       ? null\r\n//                       : address.district\r\n//                   }\r\n//                   onChange={(e) => handleChange(e)}\r\n//                   onOpen={handleOpenDistrict}\r\n//                   inputProps={{\r\n//                     name: \"district\",\r\n//                     id: \"district-simple\",\r\n//                   }}\r\n//                 >\r\n//                   {address.districtsByProvince.map((district) => {\r\n//                     return (\r\n//                       <MenuItem key={district.id} value={district}>\r\n//                         {district.name}\r\n//                       </MenuItem>\r\n//                     );\r\n//                   })}\r\n//                 </Select>\r\n//               </FormControl>\r\n//             </Grid>\r\n\r\n//             {/* commune */}\r\n//             <Grid item lg={4} md={4} sm={4} xs={12}>\r\n//               <FormControl fullWidth={true} variant=\"outlined\" size=\"small\">\r\n//                 <InputLabel htmlFor=\"commune-simple\">\r\n//                   {<span className=\"font\">{t(\"user.commune\")}</span>}\r\n//                 </InputLabel>\r\n//                 <Select\r\n//                   value={\r\n//                     JSON.stringify(address.commune) === JSON.stringify({})\r\n//                       ? null\r\n//                       : address.commune\r\n//                   }\r\n//                   onChange={(e) => handleChange(e)}\r\n//                   onOpen={handleOpenCommune}\r\n//                   inputProps={{\r\n//                     name: \"commune\",\r\n//                     id: \"commune-simple\",\r\n//                   }}\r\n//                 >\r\n//                   {address.communesByDistrict.map((commune) => {\r\n//                     return (\r\n//                       <MenuItem key={commune.id} value={commune}>\r\n//                         {commune.name}\r\n//                       </MenuItem>\r\n//                     );\r\n//                   })}\r\n//                 </Select>\r\n//               </FormControl>\r\n//             </Grid>\r\n//           </Grid>\r\n//         </DialogContent>\r\n\r\n//         <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n//           <Button\r\n//             variant=\"contained\"\r\n//             color=\"secondary\"\r\n//             onClick={() => handleClose()}\r\n//           >\r\n//             {t(\"Cancel\")}\r\n//           </Button>\r\n//           <Button\r\n//             variant=\"contained\"\r\n//             color=\"primary\"\r\n//             type=\"submit\"\r\n//             disabled={loading}\r\n//           >\r\n//             {t(\"Save\")}\r\n//           </Button>\r\n//         </DialogActions>\r\n//       </ValidatorForm>\r\n//     </Dialog>\r\n//   );\r\n// }\r\n\r\n// export default EmployeesEditorDialog;\r\n"]},"metadata":{},"sourceType":"module"}