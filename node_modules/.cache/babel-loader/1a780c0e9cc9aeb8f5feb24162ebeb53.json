{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\L0-old\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\L0-old\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\L0-old\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\L0-old\\\\src\\\\app\\\\views\\\\Employees\\\\Employees.jsx\";\n// import React from \"react\";\n// import { Grid, IconButton, Icon, Button, TextField } from \"@material-ui/core\";\n// import SearchIcon from '@material-ui/icons/Search';\n// import MaterialTable, { MTableToolbar } from \"material-table\";\n// // import { deleteUser } from \"./EmployeesService\";\n// // import EmployeesEditorDialog from \"./EmployeesEditorDialog\";\n// import { Breadcrumb, ConfirmationDialog } from \"egret\";\n// import { toast } from \"react-toastify\";\n// import { useTranslation } from \"react-i18next\";\n// import i18n from \"i18n\"\n// import { useState } from \"react\";\n// import { useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// // import { getEmployees } from \"app/redux/actions/EmployeesActions\";\n// toast.configure({\n// \tautoClose: 1000,\n// \tdraggable: false,\n// \tlimit: 3\n// });\n// function MaterialButton(props) {\n// \tconst { onHandleDeleteClick, onHandleEditClick } = props\n// \treturn (\n// \t\t<div>\n// \t\t\t<IconButton\n// \t\t\t\tstyle={{ marginRight: 10 }}\n// \t\t\t\tsize=\"small\"\n// \t\t\t\tonClick={onHandleEditClick}\n// \t\t\t>\n// \t\t\t\t<Icon fontSize=\"small\" color=\"primary\">\n// \t\t\t\t\tedit\n// \t\t\t\t</Icon>\n// \t\t\t</IconButton>\n// \t\t\t<IconButton\n// \t\t\t\tsize=\"small\"\n// \t\t\t\tonClick={onHandleDeleteClick}\n// \t\t\t>\n// \t\t\t\t<Icon fontSize=\"small\" color=\"secondary\">\n// \t\t\t\t\tdelete\n// \t\t\t\t</Icon>\n// \t\t\t</IconButton>\n// \t\t</div>\n// \t);\n// }\n// function Columns(t, handleDeleteClick, handleEditClick) {\n// \treturn [\n// \t\t{\n// \t\t\ttitle: t(\"Action\"),\n// \t\t\tfield: \"custom\",\n// \t\t\talign: \"left\",\n// \t\t\twidth: \"100\",\n// \t\t\trender: (rowData) => (\n// \t\t\t\t<MaterialButton\n// \t\t\t\t\titem={rowData}\n// \t\t\t\t\tonHandleEditClick={() => handleEditClick(rowData)}\n// \t\t\t\t\tonHandleDeleteClick={() => handleDeleteClick(rowData)}\n// \t\t\t\t/>\n// \t\t\t)\n// \t\t},\n// \t\t{ title: t(\"user.displayName\"), field: \"name\", width: \"150\" },\n// \t\t{\n// \t\t\ttitle: \"Phone\",\n// \t\t\tfield: \"phone\",\n// \t\t\talign: \"left\",\n// \t\t\twith: \"100\"\n// \t\t},\n// \t\t{\n// \t\t\ttitle: t(\"general.email\"),\n// \t\t\tfield: \"email\",\n// \t\t\talign: \"left\",\n// \t\t\twidth: \"150\"\n// \t\t},\n// \t\t{ title: t(\"user.age\"), field: \"age\", width: \"100\" },\n// \t\t{\n// \t\t\ttitle: \"Code\",\n// \t\t\tfield: \"code\",\n// \t\t\talign: \"left\",\n// \t\t\twith: \"100\"\n// \t\t}\n// \t];\n// }\n// function Employees() {\n// \tconst [item, setItem] = useState({})\n// \tconst [textSearch, setTextSearch] = useState(\"\")\n// \tconst [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\n// \tconst [shouldOpenConfirmationDialog, setShouldOpenConfirmationDialog] = useState(false)\n// \tconst { t } = useTranslation(\"translation\");\n// \t// const disPatch = useDispatch()\n// \t// const itemList = useSelector(state => state.Employees.Employees)\n// \t// const handleDialogEditorClose = () => {\n// \t// \tsetShouldOpenEditorDialog(false)\n// \t// \tdisPatch(getEmployees({ name: textSearch }))\n// \t// \tsetItem({})\n// \t// }\n// \tconst handleDeleteClick = (item) => {\n// \t\tsetItem(item)\n// \t\tsetShouldOpenConfirmationDialog(true)\n// \t}\n// \tconst handleConfirmDialogClose = () => {\n// \t\tsetItem({})\n// \t\tsetShouldOpenConfirmationDialog(false)\n// \t}\n// \t// const handleYesClick = async (id) => {\n// \t// \tconst data = await deleteUser(id)\n// \t// \tif (data.data.message === \"Thành công!\") {\n// \t// \t\ttoast.success(\"Xóa nhân viên thành công\")\n// \t// \t\thandleConfirmDialogClose()\n// \t// \t\tsetItem({})\n// \t// \t\tdisPatch(getEmployees({ name: textSearch }))\n// \t// \t} else {\n// \t// \t\ttoast.error(\"Có lỗi\")\n// \t// \t\thandleConfirmDialogClose()\n// \t// \t}\n// \t// }\n// \tconst handleEditClick = (item) => {\n// \t\tsetItem(item)\n// \t\tsetShouldOpenEditorDialog(true)\n// \t}\n// \tconst columns = Columns(t, handleDeleteClick, handleEditClick)\n// \t// useEffect(() => {\n// \t// \tdisPatch(getEmployees({ name: textSearch }))\n// \t// }, [textSearch])\n// \treturn (\n// \t\t<div className=\"m-sm-30\">\n// \t\t\t<div className=\"mb-sm-30\">\n// \t\t\t\t<Breadcrumb\n// \t\t\t\t\trouteSegments={[\n// \t\t\t\t\t\t{ name: t(\"Dashboard.manage\"), path: \"/directory/apartment\" },\n// \t\t\t\t\t\t{ name: t(\"Nhân viên\") }\n// \t\t\t\t\t]}\n// \t\t\t\t/>\n// \t\t\t</div>\n// \t\t\t<Grid container justify=\"space-between\">\n// \t\t\t\t<Grid item style={{ paddingTop: 10 }}>\n// \t\t\t\t\t<Button\n// \t\t\t\t\t\tclassName=\"mb-16 mr-16 align-bottom\"\n// \t\t\t\t\t\tvariant=\"contained\"\n// \t\t\t\t\t\tcolor=\"primary\"\n// \t\t\t\t\t\tonClick={() => setShouldOpenEditorDialog(true)}\n// \t\t\t\t\t>\n// \t\t\t\t\t\t{t(\"Add\")}\n// \t\t\t\t\t</Button>\n// \t\t\t\t</Grid>\n// \t\t\t\t<Grid item >\n// \t\t\t\t\t<TextField\n// \t\t\t\t\t\tid=\"standard-basic\"\n// \t\t\t\t\t\tlabel={t(\"EnterSearchEmployees\")}\n// \t\t\t\t\t\tvalue={textSearch}\n// \t\t\t\t\t\tonChange={(e) => setTextSearch(e.target.value)}\n// \t\t\t\t\t/>\n// \t\t\t\t</Grid>\n// \t\t\t</Grid>\n// \t\t\t<Grid item xs={12}>\n// \t\t\t\t{/* <div>\n// \t\t\t\t\t{shouldOpenEditorDialog && (\n// \t\t\t\t\t\t<EmployeesEditorDialog\n// \t\t\t\t\t\t\ti18n={i18n}\n// \t\t\t\t\t\t\topen={shouldOpenEditorDialog}\n// \t\t\t\t\t\t\tt={t}\n// \t\t\t\t\t\t\thandleClose={handleDialogEditorClose}\n// \t\t\t\t\t\t\titem={item}\n// \t\t\t\t\t\t/>\n// \t\t\t\t\t)}\n// \t\t\t\t\t{shouldOpenConfirmationDialog && (\n// \t\t\t\t\t\t<ConfirmationDialog\n// \t\t\t\t\t\t\topen={shouldOpenConfirmationDialog}\n// \t\t\t\t\t\t\ttitle={t(\"confirm\")}\n// \t\t\t\t\t\t\titem={item}\n// \t\t\t\t\t\t\tonConfirmDialogClose={handleConfirmDialogClose}\n// \t\t\t\t\t\t\tonYesClick={handleYesClick}\n// \t\t\t\t\t\t\ttext={t(\"DeleteConfirm\")}\n// \t\t\t\t\t\t/>\n// \t\t\t\t\t)}\n// \t\t\t\t</div> */}\n// \t\t\t\t<MaterialTable\n// \t\t\t\t\ttitle={t(\"List\")}\n// \t\t\t\t\t// data={itemList}\n// \t\t\t\t\tcolumns={columns}\n// \t\t\t\t\tcomponents={{\n// \t\t\t\t\t\tToolbar: (props) => <MTableToolbar {...props} />\n// \t\t\t\t\t}}\n// \t\t\t\t\tonSelectionChange={(rows) => {\n// \t\t\t\t\t\tthis.data = rows;\n// \t\t\t\t\t}}\n// \t\t\t\t\toptions={{\n// \t\t\t\t\t\tselection: false,\n// \t\t\t\t\t\tactionsColumnIndex: -1,\n// \t\t\t\t\t\tpaging: false,\n// \t\t\t\t\t\tsearch: false,\n// \t\t\t\t\t\trowStyle: (rowData, index) => ({\n// \t\t\t\t\t\t\tbackgroundColor: index % 2 === 1 ? \"#EEE\" : \"#FFF\"\n// \t\t\t\t\t\t}),\n// \t\t\t\t\t\tmaxBodyHeight: \"450px\",\n// \t\t\t\t\t\tminBodyHeight: \"370px\",\n// \t\t\t\t\t\theaderStyle: {\n// \t\t\t\t\t\t\tbackgroundColor: \"#358600\",\n// \t\t\t\t\t\t\tcolor: \"#fff\"\n// \t\t\t\t\t\t},\n// \t\t\t\t\t\tpadding: \"dense\",\n// \t\t\t\t\t\ttoolbar: false\n// \t\t\t\t\t}}\n// \t\t\t\t\tlocalization={{\n// \t\t\t\t\t\tbody: {\n// \t\t\t\t\t\t\temptyDataSourceMessage: `${t(\"general.emptyDataMessageTable\")}`\n// \t\t\t\t\t\t}\n// \t\t\t\t\t}}\n// \t\t\t\t/>\n// \t\t\t</Grid>\n// \t\t</div>\n// \t)\n// }\n// export default Employees;\nimport React from \"react\";\nimport { Grid, IconButton, Icon, Button, TextField } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { deleteUser } from \"./EmployeesService\";\nimport EmployeesEditorDialog from \"./EmployeesEditorDialog\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { toast } from \"react-toastify\";\nimport { useTranslation } from \"react-i18next\";\nimport i18n from \"i18n\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getEmployees } from \"app/redux/actions/EmployeesActions\";\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nfunction MaterialButton(props) {\n  var onHandleDeleteClick = props.onHandleDeleteClick,\n      onHandleEditClick = props.onHandleEditClick;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    style: {\n      marginRight: 10\n    },\n    size: \"small\",\n    onClick: onHandleEditClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    fontSize: \"small\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }\n  }, \"edit\")), /*#__PURE__*/React.createElement(IconButton, {\n    size: \"small\",\n    onClick: onHandleDeleteClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    fontSize: \"small\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }\n  }, \"delete\")));\n}\n\nfunction Columns(t, handleDeleteClick, handleEditClick) {\n  var _this = this;\n\n  return [{\n    title: t(\"Action\"),\n    field: \"custom\",\n    align: \"left\",\n    width: \"100\",\n    render: function render(rowData) {\n      return /*#__PURE__*/React.createElement(MaterialButton, {\n        item: rowData,\n        onHandleEditClick: function onHandleEditClick() {\n          return handleEditClick(rowData);\n        },\n        onHandleDeleteClick: function onHandleDeleteClick() {\n          return handleDeleteClick(rowData);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 9\n        }\n      });\n    }\n  }, {\n    title: t(\"user.displayName\"),\n    field: \"name\",\n    width: \"150\"\n  }, {\n    title: \"Phone\",\n    field: \"phone\",\n    align: \"left\",\n    with: \"100\"\n  }, {\n    title: t(\"general.email\"),\n    field: \"email\",\n    align: \"left\",\n    width: \"150\"\n  }, {\n    title: 'Tuổi',\n    field: \"age\",\n    width: \"100\"\n  }, {\n    title: \"Code\",\n    field: \"code\",\n    align: \"left\",\n    with: \"100\"\n  }];\n}\n\nfunction Employees() {\n  var _this2 = this;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      postList = _useState4[0],\n      setPostList = _useState4[1];\n\n  console.log(postList);\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      item = _useState6[0],\n      setItem = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      textSearch = _useState8[0],\n      setTextSearch = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      shouldOpenEditorDialog = _useState10[0],\n      setShouldOpenEditorDialog = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      shouldOpenConfirmationDialog = _useState12[0],\n      setShouldOpenConfirmationDialog = _useState12[1];\n\n  var _useTranslation = useTranslation(\"translation\"),\n      t = _useTranslation.t;\n\n  var disPatch = useDispatch(); //   const itemList = useSelector((state) => state.Employees.Employees);\n\n  var handleDialogEditorClose = function handleDialogEditorClose() {\n    setShouldOpenEditorDialog(false);\n    disPatch(getEmployees({\n      name: textSearch\n    }));\n    setItem({});\n  };\n\n  var handleDeleteClick = function handleDeleteClick(item) {\n    setItem(item);\n    setShouldOpenConfirmationDialog(true);\n  };\n\n  var handleConfirmDialogClose = function handleConfirmDialogClose() {\n    setItem({});\n    setShouldOpenConfirmationDialog(false);\n  };\n\n  var handleYesClick = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return deleteUser(id);\n\n            case 2:\n              data = _context.sent;\n\n              if (data.data.message === \"Thành công!\") {\n                toast.success(\"Xóa nhân viên thành công\");\n                handleConfirmDialogClose();\n                setItem({});\n                disPatch(getEmployees({\n                  name: textSearch\n                }));\n              } else {\n                toast.error(\"Có lỗi\");\n                handleConfirmDialogClose();\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleYesClick(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleEditClick = function handleEditClick(item) {\n    setItem(item);\n    setShouldOpenEditorDialog(true);\n  };\n\n  var columns = Columns(t, handleDeleteClick, handleEditClick);\n  useEffect(function () {\n    function fetchAPI() {\n      return _fetchAPI.apply(this, arguments);\n    }\n\n    function _fetchAPI() {\n      _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var response, responseJSON, data, data2;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fetch(\"http://training-api.oceantech.com.vn/cms/employees/search\", {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify({\n                    name: \"\",\n                    phone: \"\",\n                    age: \"\",\n                    email: \"\"\n                  })\n                });\n\n              case 2:\n                response = _context2.sent;\n                _context2.next = 5;\n                return response.json();\n\n              case 5:\n                responseJSON = _context2.sent;\n                console.log({\n                  responseJSON: responseJSON\n                });\n                data = responseJSON.data;\n                console.log(data);\n                data2 = data.map(function (record) {\n                  return {\n                    id: record.id,\n                    name: record.name,\n                    phone: record.phone,\n                    age: record.age,\n                    code: record.code,\n                    email: record.email\n                  };\n                });\n                console.log(data2);\n                setPostList(data2);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return _fetchAPI.apply(this, arguments);\n    }\n\n    fetchAPI();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"m-sm-30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-sm-30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb, {\n    routeSegments: [{\n      name: t(\"Dashboard.manage\"),\n      path: \"/directory/apartment\"\n    }, {\n      name: t(\"Nhân viên\")\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    style: {\n      paddingTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"mb-16 mr-16 align-bottom\",\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: function onClick() {\n      return setShouldOpenEditorDialog(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 11\n    }\n  }, t(\"Add\"))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"standard-basic\",\n    label: t(\"EnterSearchEmployees\"),\n    value: textSearch,\n    onChange: function onChange(e) {\n      return setTextSearch(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 9\n    }\n  }, shouldOpenEditorDialog && /*#__PURE__*/React.createElement(EmployeesEditorDialog, {\n    i18n: i18n,\n    open: shouldOpenEditorDialog,\n    t: t,\n    handleClose: handleDialogEditorClose,\n    item: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 13\n    }\n  }), shouldOpenConfirmationDialog && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n    open: shouldOpenConfirmationDialog,\n    title: t(\"confirm\"),\n    item: item,\n    onConfirmDialogClose: handleConfirmDialogClose,\n    onYesClick: handleYesClick,\n    text: t(\"DeleteConfirm\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(MaterialTable, {\n    title: t(\"List\"),\n    data: postList,\n    columns: columns,\n    components: {\n      Toolbar: function Toolbar(props) {\n        return /*#__PURE__*/React.createElement(MTableToolbar, Object.assign({}, props, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 33\n          }\n        }));\n      }\n    },\n    onSelectionChange: function onSelectionChange(rows) {\n      _this2.data = rows;\n    },\n    options: {\n      selection: false,\n      actionsColumnIndex: -1,\n      paging: false,\n      search: false,\n      rowStyle: function rowStyle(rowData, index) {\n        return {\n          backgroundColor: index % 2 === 1 ? \"#EEE\" : \"#FFF\"\n        };\n      },\n      maxBodyHeight: \"450px\",\n      minBodyHeight: \"370px\",\n      headerStyle: {\n        backgroundColor: \"#358600\",\n        color: \"#fff\"\n      },\n      padding: \"dense\",\n      toolbar: false\n    },\n    localization: {\n      body: {\n        emptyDataSourceMessage: \"\".concat(t(\"general.emptyDataMessageTable\"))\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Employees;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/L0-old/src/app/views/Employees/Employees.jsx"],"names":["React","Grid","IconButton","Icon","Button","TextField","SearchIcon","MaterialTable","MTableToolbar","deleteUser","EmployeesEditorDialog","Breadcrumb","ConfirmationDialog","toast","useTranslation","i18n","useState","useEffect","useDispatch","useSelector","getEmployees","configure","autoClose","draggable","limit","MaterialButton","props","onHandleDeleteClick","onHandleEditClick","marginRight","Columns","t","handleDeleteClick","handleEditClick","title","field","align","width","render","rowData","with","Employees","open","setOpen","postList","setPostList","console","log","item","setItem","textSearch","setTextSearch","shouldOpenEditorDialog","setShouldOpenEditorDialog","shouldOpenConfirmationDialog","setShouldOpenConfirmationDialog","disPatch","handleDialogEditorClose","name","handleConfirmDialogClose","handleYesClick","id","data","message","success","error","columns","fetchAPI","fetch","method","headers","body","JSON","stringify","phone","age","email","response","json","responseJSON","data2","map","record","code","path","paddingTop","e","target","value","Toolbar","rows","selection","actionsColumnIndex","paging","search","rowStyle","index","backgroundColor","maxBodyHeight","minBodyHeight","headerStyle","color","padding","toolbar","emptyDataSourceMessage"],"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","sourcesContent":["// import React from \"react\";\r\n// import { Grid, IconButton, Icon, Button, TextField } from \"@material-ui/core\";\r\n// import SearchIcon from '@material-ui/icons/Search';\r\n// import MaterialTable, { MTableToolbar } from \"material-table\";\r\n// // import { deleteUser } from \"./EmployeesService\";\r\n// // import EmployeesEditorDialog from \"./EmployeesEditorDialog\";\r\n// import { Breadcrumb, ConfirmationDialog } from \"egret\";\r\n// import { toast } from \"react-toastify\";\r\n// import { useTranslation } from \"react-i18next\";\r\n// import i18n from \"i18n\"\r\n// import { useState } from \"react\";\r\n// import { useEffect } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// // import { getEmployees } from \"app/redux/actions/EmployeesActions\";\r\n\r\n// toast.configure({\r\n// \tautoClose: 1000,\r\n// \tdraggable: false,\r\n// \tlimit: 3\r\n// });\r\n\r\n// function MaterialButton(props) {\r\n// \tconst { onHandleDeleteClick, onHandleEditClick } = props\r\n// \treturn (\r\n// \t\t<div>\r\n// \t\t\t<IconButton\r\n// \t\t\t\tstyle={{ marginRight: 10 }}\r\n// \t\t\t\tsize=\"small\"\r\n// \t\t\t\tonClick={onHandleEditClick}\r\n// \t\t\t>\r\n// \t\t\t\t<Icon fontSize=\"small\" color=\"primary\">\r\n// \t\t\t\t\tedit\r\n// \t\t\t\t</Icon>\r\n// \t\t\t</IconButton>\r\n// \t\t\t<IconButton\r\n// \t\t\t\tsize=\"small\"\r\n// \t\t\t\tonClick={onHandleDeleteClick}\r\n// \t\t\t>\r\n// \t\t\t\t<Icon fontSize=\"small\" color=\"secondary\">\r\n// \t\t\t\t\tdelete\r\n// \t\t\t\t</Icon>\r\n// \t\t\t</IconButton>\r\n// \t\t</div>\r\n// \t);\r\n// }\r\n\r\n// function Columns(t, handleDeleteClick, handleEditClick) {\r\n// \treturn [\r\n// \t\t{\r\n// \t\t\ttitle: t(\"Action\"),\r\n// \t\t\tfield: \"custom\",\r\n// \t\t\talign: \"left\",\r\n// \t\t\twidth: \"100\",\r\n// \t\t\trender: (rowData) => (\r\n// \t\t\t\t<MaterialButton\r\n// \t\t\t\t\titem={rowData}\r\n// \t\t\t\t\tonHandleEditClick={() => handleEditClick(rowData)}\r\n// \t\t\t\t\tonHandleDeleteClick={() => handleDeleteClick(rowData)}\r\n// \t\t\t\t/>\r\n// \t\t\t)\r\n// \t\t},\r\n// \t\t{ title: t(\"user.displayName\"), field: \"name\", width: \"150\" },\r\n// \t\t{\r\n// \t\t\ttitle: \"Phone\",\r\n// \t\t\tfield: \"phone\",\r\n// \t\t\talign: \"left\",\r\n// \t\t\twith: \"100\"\r\n// \t\t},\r\n// \t\t{\r\n// \t\t\ttitle: t(\"general.email\"),\r\n// \t\t\tfield: \"email\",\r\n// \t\t\talign: \"left\",\r\n// \t\t\twidth: \"150\"\r\n// \t\t},\r\n// \t\t{ title: t(\"user.age\"), field: \"age\", width: \"100\" },\r\n// \t\t{\r\n// \t\t\ttitle: \"Code\",\r\n// \t\t\tfield: \"code\",\r\n// \t\t\talign: \"left\",\r\n// \t\t\twith: \"100\"\r\n// \t\t}\r\n// \t];\r\n// }\r\n\r\n// function Employees() {\r\n\r\n// \tconst [item, setItem] = useState({})\r\n// \tconst [textSearch, setTextSearch] = useState(\"\")\r\n// \tconst [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n// \tconst [shouldOpenConfirmationDialog, setShouldOpenConfirmationDialog] = useState(false)\r\n\r\n// \tconst { t } = useTranslation(\"translation\");\r\n\r\n// \t// const disPatch = useDispatch()\r\n// \t// const itemList = useSelector(state => state.Employees.Employees)\r\n\r\n// \t// const handleDialogEditorClose = () => {\r\n// \t// \tsetShouldOpenEditorDialog(false)\r\n// \t// \tdisPatch(getEmployees({ name: textSearch }))\r\n// \t// \tsetItem({})\r\n// \t// }\r\n\r\n// \tconst handleDeleteClick = (item) => {\r\n// \t\tsetItem(item)\r\n// \t\tsetShouldOpenConfirmationDialog(true)\r\n// \t}\r\n\r\n// \tconst handleConfirmDialogClose = () => {\r\n// \t\tsetItem({})\r\n// \t\tsetShouldOpenConfirmationDialog(false)\r\n// \t}\r\n\r\n// \t// const handleYesClick = async (id) => {\r\n// \t// \tconst data = await deleteUser(id)\r\n// \t// \tif (data.data.message === \"Thành công!\") {\r\n// \t// \t\ttoast.success(\"Xóa nhân viên thành công\")\r\n// \t// \t\thandleConfirmDialogClose()\r\n// \t// \t\tsetItem({})\r\n// \t// \t\tdisPatch(getEmployees({ name: textSearch }))\r\n// \t// \t} else {\r\n// \t// \t\ttoast.error(\"Có lỗi\")\r\n// \t// \t\thandleConfirmDialogClose()\r\n// \t// \t}\r\n// \t// }\r\n\r\n// \tconst handleEditClick = (item) => {\r\n// \t\tsetItem(item)\r\n// \t\tsetShouldOpenEditorDialog(true)\r\n// \t}\r\n\r\n// \tconst columns = Columns(t, handleDeleteClick, handleEditClick)\r\n\r\n// \t// useEffect(() => {\r\n// \t// \tdisPatch(getEmployees({ name: textSearch }))\r\n// \t// }, [textSearch])\r\n\r\n// \treturn (\r\n// \t\t<div className=\"m-sm-30\">\r\n\r\n// \t\t\t<div className=\"mb-sm-30\">\r\n// \t\t\t\t<Breadcrumb\r\n// \t\t\t\t\trouteSegments={[\r\n// \t\t\t\t\t\t{ name: t(\"Dashboard.manage\"), path: \"/directory/apartment\" },\r\n// \t\t\t\t\t\t{ name: t(\"Nhân viên\") }\r\n// \t\t\t\t\t]}\r\n// \t\t\t\t/>\r\n// \t\t\t</div>\r\n\r\n// \t\t\t<Grid container justify=\"space-between\">\r\n// \t\t\t\t<Grid item style={{ paddingTop: 10 }}>\r\n// \t\t\t\t\t<Button\r\n// \t\t\t\t\t\tclassName=\"mb-16 mr-16 align-bottom\"\r\n// \t\t\t\t\t\tvariant=\"contained\"\r\n// \t\t\t\t\t\tcolor=\"primary\"\r\n// \t\t\t\t\t\tonClick={() => setShouldOpenEditorDialog(true)}\r\n// \t\t\t\t\t>\r\n// \t\t\t\t\t\t{t(\"Add\")}\r\n// \t\t\t\t\t</Button>\r\n// \t\t\t\t</Grid>\r\n\r\n// \t\t\t\t<Grid item >\r\n// \t\t\t\t\t<TextField\r\n// \t\t\t\t\t\tid=\"standard-basic\"\r\n// \t\t\t\t\t\tlabel={t(\"EnterSearchEmployees\")}\r\n// \t\t\t\t\t\tvalue={textSearch}\r\n// \t\t\t\t\t\tonChange={(e) => setTextSearch(e.target.value)}\r\n// \t\t\t\t\t/>\r\n// \t\t\t\t</Grid>\r\n// \t\t\t</Grid>\r\n\r\n// \t\t\t<Grid item xs={12}>\r\n// \t\t\t\t{/* <div>\r\n// \t\t\t\t\t{shouldOpenEditorDialog && (\r\n// \t\t\t\t\t\t<EmployeesEditorDialog\r\n// \t\t\t\t\t\t\ti18n={i18n}\r\n// \t\t\t\t\t\t\topen={shouldOpenEditorDialog}\r\n// \t\t\t\t\t\t\tt={t}\r\n// \t\t\t\t\t\t\thandleClose={handleDialogEditorClose}\r\n// \t\t\t\t\t\t\titem={item}\r\n// \t\t\t\t\t\t/>\r\n// \t\t\t\t\t)}\r\n\r\n// \t\t\t\t\t{shouldOpenConfirmationDialog && (\r\n// \t\t\t\t\t\t<ConfirmationDialog\r\n// \t\t\t\t\t\t\topen={shouldOpenConfirmationDialog}\r\n// \t\t\t\t\t\t\ttitle={t(\"confirm\")}\r\n// \t\t\t\t\t\t\titem={item}\r\n// \t\t\t\t\t\t\tonConfirmDialogClose={handleConfirmDialogClose}\r\n// \t\t\t\t\t\t\tonYesClick={handleYesClick}\r\n// \t\t\t\t\t\t\ttext={t(\"DeleteConfirm\")}\r\n// \t\t\t\t\t\t/>\r\n// \t\t\t\t\t)}\r\n// \t\t\t\t</div> */}\r\n// \t\t\t\t<MaterialTable\r\n// \t\t\t\t\ttitle={t(\"List\")}\r\n// \t\t\t\t\t// data={itemList}\r\n// \t\t\t\t\tcolumns={columns}\r\n// \t\t\t\t\tcomponents={{\r\n// \t\t\t\t\t\tToolbar: (props) => <MTableToolbar {...props} />\r\n// \t\t\t\t\t}}\r\n// \t\t\t\t\tonSelectionChange={(rows) => {\r\n// \t\t\t\t\t\tthis.data = rows;\r\n// \t\t\t\t\t}}\r\n// \t\t\t\t\toptions={{\r\n// \t\t\t\t\t\tselection: false,\r\n// \t\t\t\t\t\tactionsColumnIndex: -1,\r\n// \t\t\t\t\t\tpaging: false,\r\n// \t\t\t\t\t\tsearch: false,\r\n// \t\t\t\t\t\trowStyle: (rowData, index) => ({\r\n// \t\t\t\t\t\t\tbackgroundColor: index % 2 === 1 ? \"#EEE\" : \"#FFF\"\r\n// \t\t\t\t\t\t}),\r\n// \t\t\t\t\t\tmaxBodyHeight: \"450px\",\r\n// \t\t\t\t\t\tminBodyHeight: \"370px\",\r\n// \t\t\t\t\t\theaderStyle: {\r\n// \t\t\t\t\t\t\tbackgroundColor: \"#358600\",\r\n// \t\t\t\t\t\t\tcolor: \"#fff\"\r\n// \t\t\t\t\t\t},\r\n// \t\t\t\t\t\tpadding: \"dense\",\r\n// \t\t\t\t\t\ttoolbar: false\r\n// \t\t\t\t\t}}\r\n// \t\t\t\t\tlocalization={{\r\n// \t\t\t\t\t\tbody: {\r\n// \t\t\t\t\t\t\temptyDataSourceMessage: `${t(\"general.emptyDataMessageTable\")}`\r\n// \t\t\t\t\t\t}\r\n// \t\t\t\t\t}}\r\n// \t\t\t\t/>\r\n// \t\t\t</Grid>\r\n// \t\t</div>\r\n// \t)\r\n// }\r\n\r\n// export default Employees;\r\n\r\nimport React from \"react\";\r\nimport { Grid, IconButton, Icon, Button, TextField } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { deleteUser } from \"./EmployeesService\";\r\nimport EmployeesEditorDialog from \"./EmployeesEditorDialog\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"i18n\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getEmployees } from \"app/redux/actions/EmployeesActions\";\r\n\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit: 3,\r\n});\r\n\r\nfunction MaterialButton(props) {\r\n  const { onHandleDeleteClick, onHandleEditClick } = props;\r\n  return (\r\n    <div>\r\n      <IconButton\r\n        style={{ marginRight: 10 }}\r\n        size=\"small\"\r\n        onClick={onHandleEditClick}\r\n      >\r\n        <Icon fontSize=\"small\" color=\"primary\">\r\n          edit\r\n        </Icon>\r\n      </IconButton>\r\n      <IconButton size=\"small\" onClick={onHandleDeleteClick}>\r\n        <Icon fontSize=\"small\" color=\"secondary\">\r\n          delete\r\n        </Icon>\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Columns(t, handleDeleteClick, handleEditClick) {\r\n  return [\r\n    {\r\n      title: t(\"Action\"),\r\n      field: \"custom\",\r\n      align: \"left\",\r\n      width: \"100\",\r\n      render: (rowData) => (\r\n        <MaterialButton\r\n          item={rowData}\r\n          onHandleEditClick={() => handleEditClick(rowData)}\r\n          onHandleDeleteClick={() => handleDeleteClick(rowData)}\r\n        />\r\n      ),\r\n    },\r\n    { title: t(\"user.displayName\"), field: \"name\", width: \"150\" },\r\n\r\n    {\r\n      title: \"Phone\",\r\n      field: \"phone\",\r\n      align: \"left\",\r\n      with: \"100\",\r\n    },\r\n    {\r\n      title: t(\"general.email\"),\r\n      field: \"email\",\r\n      align: \"left\",\r\n      width: \"150\",\r\n    },\r\n    { title: 'Tuổi', field: \"age\", width: \"100\" },\r\n    {\r\n      title: \"Code\",\r\n      field: \"code\",\r\n      align: \"left\",\r\n      with: \"100\",\r\n    },\r\n  ];\r\n}\r\n\r\nfunction Employees() {\r\n  const [open, setOpen] = useState(false);\r\n  \r\n  const [postList, setPostList] = useState();\r\n  console.log(postList);\r\n  const [item, setItem] = useState({});\r\n  const [textSearch, setTextSearch] = useState(\"\");\r\n  const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false);\r\n  const [shouldOpenConfirmationDialog, setShouldOpenConfirmationDialog] =\r\n    useState(false);\r\n\r\n  const { t } = useTranslation(\"translation\");\r\n\r\n  const disPatch = useDispatch();\r\n  //   const itemList = useSelector((state) => state.Employees.Employees);\r\n\r\n  const handleDialogEditorClose = () => {\r\n    setShouldOpenEditorDialog(false);\r\n    disPatch(getEmployees({ name: textSearch }));\r\n    setItem({});\r\n  };\r\n\r\n  const handleDeleteClick = (item) => {\r\n    setItem(item);\r\n    setShouldOpenConfirmationDialog(true);\r\n  };\r\n\r\n  const handleConfirmDialogClose = () => {\r\n    setItem({});\r\n    setShouldOpenConfirmationDialog(false);\r\n  };\r\n\r\n  const handleYesClick = async (id) => {\r\n    const data = await deleteUser(id);\r\n    if (data.data.message === \"Thành công!\") {\r\n      toast.success(\"Xóa nhân viên thành công\");\r\n      handleConfirmDialogClose();\r\n      setItem({});\r\n      disPatch(getEmployees({ name: textSearch }));\r\n    } else {\r\n      toast.error(\"Có lỗi\");\r\n      handleConfirmDialogClose();\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (item) => {\r\n    setItem(item);\r\n    setShouldOpenEditorDialog(true);\r\n  };\r\n\r\n  const columns = Columns(t, handleDeleteClick, handleEditClick);\r\n\r\n  useEffect(() => {\r\n    async function fetchAPI() {\r\n      const response = await fetch(\r\n        \"http://training-api.oceantech.com.vn/cms/employees/search\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ name: \"\", phone: \"\", age: \"\", email: \"\" }),\r\n        }\r\n      );\r\n      const responseJSON = await response.json();\r\n      console.log({ responseJSON });\r\n      const { data } = responseJSON;\r\n\r\n      console.log(data);\r\n      const data2 = data.map((record) => {\r\n        return {\r\n          id: record.id,\r\n          name: record.name,\r\n          phone: record.phone,\r\n          age: record.age,\r\n          code:record.code,\r\n          email: record.email,\r\n        };\r\n      });\r\n      console.log(data2);\r\n      setPostList(data2);\r\n    }\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"m-sm-30\">\r\n      <div className=\"mb-sm-30\">\r\n        <Breadcrumb\r\n          routeSegments={[\r\n            { name: t(\"Dashboard.manage\"), path: \"/directory/apartment\" },\r\n            { name: t(\"Nhân viên\") },\r\n          ]}\r\n        />\r\n      </div>\r\n\r\n      <Grid container justify=\"space-between\">\r\n        <Grid item style={{ paddingTop: 10 }}>\r\n          <Button\r\n            className=\"mb-16 mr-16 align-bottom\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => setShouldOpenEditorDialog(true)}\r\n          >\r\n            {t(\"Add\")}\r\n          </Button>\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            label={t(\"EnterSearchEmployees\")}\r\n            value={textSearch}\r\n            onChange={(e) => setTextSearch(e.target.value)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <div>\r\n          {shouldOpenEditorDialog && (\r\n            <EmployeesEditorDialog\r\n              i18n={i18n}\r\n              open={shouldOpenEditorDialog}\r\n              t={t}\r\n              handleClose={handleDialogEditorClose}\r\n              item={item}\r\n            />\r\n          )}\r\n\r\n          {shouldOpenConfirmationDialog && (\r\n            <ConfirmationDialog\r\n              open={shouldOpenConfirmationDialog}\r\n              title={t(\"confirm\")}\r\n              item={item}\r\n              onConfirmDialogClose={handleConfirmDialogClose}\r\n              onYesClick={handleYesClick}\r\n              text={t(\"DeleteConfirm\")}\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        <MaterialTable\r\n          title={t(\"List\")}\r\n          data={postList}\r\n          columns={columns}\r\n          components={{\r\n            Toolbar: (props) => <MTableToolbar {...props} />,\r\n          }}\r\n          onSelectionChange={(rows) => {\r\n            this.data = rows;\r\n          }}\r\n          options={{\r\n            selection: false,\r\n            actionsColumnIndex: -1,\r\n            paging: false,\r\n            search: false,\r\n            rowStyle: (rowData, index) => ({\r\n              backgroundColor: index % 2 === 1 ? \"#EEE\" : \"#FFF\",\r\n            }),\r\n            maxBodyHeight: \"450px\",\r\n            minBodyHeight: \"370px\",\r\n            headerStyle: {\r\n              backgroundColor: \"#358600\",\r\n              color: \"#fff\",\r\n            },\r\n            padding: \"dense\",\r\n            toolbar: false,\r\n          }}\r\n          localization={{\r\n            body: {\r\n              emptyDataSourceMessage: `${t(\"general.emptyDataMessageTable\")}`,\r\n            },\r\n          }}\r\n        />\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Employees;\r\n"]},"metadata":{},"sourceType":"module"}